{
  "Scora e2e test": {
    "scope": "typescript",
    "prefix": "mt-test-e2e",
    "body": [
      "import 'dotenv/config'",
      "",
      "import { setupServer } from '@api/Server'",
      "import mongoose from 'mongoose'",
      "import supertest from 'supertest'",
      "",
      "import { dropAllCollections } from '@tests/_helpers/database'",
      "",
      "describe('${1:Context}', () => {",
      "\tlet app: any",
      "\tlet server: any",
      "\tlet request: any",
      "\tlet httpServer: any",
      "\tbeforeAll(async () => {",
      "\t\tconst setupServerInstance: any = await setupServer()",
      "\t\tserver = setupServerInstance.server",
      "\t\tawait server.run()",
      "\t\tapp = server.webServer.getApp()",
      "\t\thttpServer = app.listen(3001)",
      "\t\trequest = supertest(httpServer)",
      "\t})",
      "",
      "\tbeforeEach(async () => {",
      "\t\tjest.restoreAllMocks()",
      "\t\tjest.resetAllMocks()",
      "\t\tawait dropAllCollections()",
      "\t})",
      "",
      "\tafterAll(async () => {",
      "\t\tawait mongoose.connection.dropDatabase()",
      "\t\tawait mongoose.disconnect()",
      "\t\tawait httpServer.close()",
      "\t})",
      "",
      "\tdescribe('${2:Scenario}', () => {",
      "\t\ttest('${3:TestName}', async () => {",
      "\t\t\tconst response = await request.post('/accounts').send({})",
      "\t\t\texpect(response.status).toBe(400)",
      "\t\t})",
      "\t})",
      "})",
      ""
    ],
    "description": "Create base test end-to-end"
  },
  "Scora entity unit test": {
    "scope": "typescript",
    "prefix": "mt-test-entity",
    "body": [
      "import Entity from '@domain/account/entities/${1:entityName}'",
      "import faker from 'faker'",
      "",
      "describe('$1', () => {",
      "\ttest('${$2:title}', () => {",
      "\t\tconst sut = Entity.create()",
      "",
      "\t\tconst expected = {}",
      "",
      "\t\texpect(sut).toMatchObject(expected)",
      "\t})",
      "})",
      ""
    ]
  },
  "Scora integ test": {
    "scope": "typescript",
    "prefix": "mt-test-integ",
    "body": [
      "import 'dotenv/config'",
      "",
      "import { setupServer } from '@api/Server'",
      "import mongoose from 'mongoose'",
      "import TYPES from '@crosscutting/Types'",
      "",
      "import { dropAllCollections } from '@tests/_helpers/database'",
      "import { Container } from 'inversify'",
      "",
      "describe('${1:Context}', () => {",
      "\tlet server: any",
      "\tlet serviceContainer: Container",
      "\tbeforeAll(async () => {",
      "\t\tconst setupServerInstance: any = await setupServer()",
      "\t\tserver = setupServerInstance.server",
      "\t\tawait server.run()",
      "\t\tserviceContainer = setupServerInstance.container",
      "\t})",
      "",
      "\tbeforeEach(async () => {",
      "\t\tjest.restoreAllMocks()",
      "\t\tjest.resetAllMocks()",
      "\t\tawait dropAllCollections()",
      "\t})",
      "",
      "\tafterAll(async () => {",
      "\t\tawait mongoose.disconnect()",
      "\t})",
      "",
      "\tdescribe('${2:Scenario}', () => {",
      "\t\ttest('${3:TestName}', async () => {",
      "\t\t\tconst instance = serviceContainer.get<ClassName>(TYPES.typeName)",
      "\t\t\texpect(true).toBe(true)",
      "\t\t})",
      "\t})",
      "})",
      ""
    ],
    "description": "Create base test end-to-end"
  },
  "describe + test": {
    "prefix": "mt-desc",
    "body": [
      "describe('${1:description}', () => {",
      "\ttest('${2:title}', async () => {",
      "\t\texpect(true).toBe(true)",
      "\t})",
      "})"
    ],
    "description": "Complete describe block"
  },
  "test block": {
    "prefix": "mt-tst",
    "body": ["test('${1:title}', async () => {", "\texpect(true).toBe(true)", "})"],
    "description": "test block"
  },
  "it block": {
    "prefix": "mt-itb",
    "body": ["it('title', async () => {", "  expect(true).toBe(true)", "})"],
    "description": "it block"
  }
}
